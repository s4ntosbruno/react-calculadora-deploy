{"version":3,"sources":["components/button.jsx","main/calculator.jsx","components/display.jsx","serviceWorker.js","index.js"],"names":["props","classes","operation","double","triple","onClick","e","click","label","className","initialState","displayValue","clearDisplay","values","current","calculator","state","clearMemory","bind","setOperation","addDigit","this","setState","equals","currentOperation","eval","n","includes","i","newValue","parseFloat","console","log","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42641fdb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nexport default props => {\r\n  let classes = \"button \";\r\n  classes += props.operation ? \"operation\" : \"\";\r\n  classes += props.double ? \"double\" : \"\";\r\n  classes += props.triple ? \"triple\" : \"\";\r\n\r\n  return (\r\n    <button onClick={e => props.click(props.label)} className={classes}>\r\n      {props.label}\r\n    </button>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./calculator.css\";\r\nimport Button from \"../components/button\";\r\nimport Display from \"../components/display\";\r\n\r\nconst initialState = {\r\n  displayValue: \"0\",\r\n  clearDisplay: false,\r\n  operation: null,\r\n  values: [0, 0],\r\n  current: 0\r\n};\r\n\r\nexport default class calculator extends Component {\r\n  state = { ...initialState };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.clearMemory = this.clearMemory.bind(this);\r\n    this.setOperation = this.setOperation.bind(this);\r\n    this.addDigit = this.addDigit.bind(this);\r\n  }\r\n\r\n  clearMemory() {\r\n    this.setState({ ...initialState });\r\n  }\r\n\r\n  setOperation(operation) {\r\n    if (this.state.current === 0) {\r\n      this.setState({ operation, current: 1, clearDisplay: true });\r\n    } else {\r\n      const equals = operation === \"=\";\r\n      const currentOperation = this.state.operation;\r\n\r\n      const values = [...this.state.values];\r\n      try {\r\n        values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`);\r\n      } catch (e) {\r\n        values[0] = this.state.values[0];\r\n      }\r\n      values[1] = 0;\r\n\r\n      this.setState({\r\n        displayValue: values[0],\r\n        operation: equals ? null : operation,\r\n        current: equals ? 0 : 1,\r\n        clearDisplay: !equals,\r\n        values\r\n      });\r\n    }\r\n  }\r\n\r\n  addDigit(n) {\r\n    if (n === \".\" && this.state.displayValue.includes(\".\")) {\r\n      return;\r\n    }\r\n\r\n    const clearDisplay =\r\n      this.state.displayValue === \"0\" || this.state.clearDisplay;\r\n    const currentValue = clearDisplay ? \"\" : this.state.displayValue;\r\n    const displayValue = currentValue + n;\r\n    this.setState({ displayValue, clearDisplay: false });\r\n\r\n    if (n !== \".\") {\r\n      const i = this.state.current;\r\n      const newValue = parseFloat(displayValue);\r\n      const values = [...this.state.values];\r\n      values[i] = newValue;\r\n      this.setState({ values });\r\n      console.log(values);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calculator\">\r\n        <Display value={this.state.displayValue} />\r\n        <Button label=\"Clear\" click={this.clearMemory} triple />\r\n        <Button label=\"/\" click={this.setOperation} operation />\r\n        <Button label=\"7\" click={this.addDigit} />\r\n        <Button label=\"8\" click={this.addDigit} />\r\n        <Button label=\"9\" click={this.addDigit} />\r\n        <Button label=\"*\" click={this.setOperation} operation />\r\n        <Button label=\"4\" click={this.addDigit} />\r\n        <Button label=\"5\" click={this.addDigit} />\r\n        <Button label=\"6\" click={this.addDigit} />\r\n        <Button label=\"-\" click={this.setOperation} operation />\r\n        <Button label=\"1\" click={this.addDigit} />\r\n        <Button label=\"2\" click={this.addDigit} />\r\n        <Button label=\"3\" click={this.addDigit} />\r\n        <Button label=\"+\" click={this.setOperation} operation />\r\n        <Button label=\"0\" click={this.addDigit} double />\r\n        <Button label=\".\" click={this.addDigit} />\r\n        <Button label=\"=\" click={this.setOperation} operation />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./display.css\";\r\n\r\nexport default props => <div className=\"display\">{props.value}</div>;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Calculator from \"./main/calculator\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}